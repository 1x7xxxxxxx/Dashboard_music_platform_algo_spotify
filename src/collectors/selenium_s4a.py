"""Collector Selenium pour Spotify for Artists."""
import os
import time
import glob
import pandas as pd
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import logging

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException


# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SpotifyForArtistsCollector:
    """Collecte les donn√©es depuis Spotify for Artists via Selenium."""
    
    def __init__(self, email: str, password: str, download_dir: str, headless: bool = False):
        """
        Initialise le collector Selenium.
        
        Args:
            email: Email Spotify for Artists
            password: Mot de passe
            download_dir: R√©pertoire de t√©l√©chargement
            headless: Mode sans interface graphique
        """
        self.email = email
        self.password = password
        self.download_dir = Path(download_dir)
        self.headless = headless
        self.driver = None
        self.wait = None
        
        # Cr√©er le dossier de t√©l√©chargement
        self.download_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"üìÅ Dossier de t√©l√©chargement: {self.download_dir}")
    
    def _configure_chrome_options(self) -> Options:
        """Configure les options du navigateur Chrome."""
        chrome_options = Options()
        
        # Pr√©f√©rences de t√©l√©chargement
        preferences = {
            "download.default_directory": str(self.download_dir.absolute()),
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": True
        }
        chrome_options.add_experimental_option("prefs", preferences)
        
        # Options anti-d√©tection
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # D√©sactiver les logs inutiles
        chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
        chrome_options.add_argument('--log-level=3')
        
        # Mode headless si activ√©
        if self.headless:
            chrome_options.add_argument("--headless=new")
            chrome_options.add_argument("--window-size=1920,1080")
            logger.info("üîá Mode headless activ√©")
        
        return chrome_options
    
    def initialize_driver(self) -> None:
        """Initialise le driver Selenium."""
        logger.info("üöÄ Initialisation du driver Chrome...")
        
        try:
            service = Service(ChromeDriverManager().install())
            chrome_options = self._configure_chrome_options()
            
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.driver.set_page_load_timeout(60)
            self.wait = WebDriverWait(self.driver, 30)
            
            logger.info("‚úÖ Driver Chrome initialis√©")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation driver: {e}")
            raise
    
    def login(self, max_retries: int = 2) -> bool:
        """
        Se connecte √† Spotify for Artists avec retry.
        
        Args:
            max_retries: Nombre de tentatives maximum
            
        Returns:
            True si connexion r√©ussie, False sinon
        """
        for attempt in range(1, max_retries + 1):
            logger.info(f"üîê Connexion √† Spotify for Artists (tentative {attempt}/{max_retries})...")
            
            try:
                # Navigation
                self.driver.get("https://artists.spotify.com/")
                time.sleep(4)
                
                # Cliquer sur "Log in"
                try:
                    login_button = self.wait.until(
                        EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Log in') or contains(text(), 'Se connecter')]"))
                    )
                    login_button.click()
                    logger.info("üîÑ Redirection vers la page de connexion...")
                    time.sleep(4)
                except TimeoutException:
                    logger.warning("‚ö†Ô∏è Bouton 'Log in' non trouv√©, tentative navigation directe...")
                    self.driver.get("https://accounts.spotify.com/login")
                    time.sleep(4)
                
                # √âTAPE 1: Saisir l'email
                logger.info("üìß Saisie de l'email...")
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(2)
                
                email_field = WebDriverWait(self.driver, 15).until(
                    EC.visibility_of_element_located((By.XPATH, "//input[@type='text' or @type='email'][1]"))
                )
                
                self.driver.execute_script("arguments[0].scrollIntoView(true);", email_field)
                time.sleep(1)
                email_field.click()
                time.sleep(0.5)
                email_field.clear()
                time.sleep(0.5)
                email_field.send_keys(self.email)
                logger.info("‚úÖ Email saisi")
                time.sleep(2)
                
                # √âTAPE 2: Cliquer sur "Continuer"
                logger.info("üîÑ Recherche du bouton 'Continuer'...")
                time.sleep(2)
                
                all_buttons = self.driver.find_elements(By.XPATH, "//button")
                continue_button = None
                
                for button in all_buttons:
                    try:
                        if button.is_displayed() and button.is_enabled():
                            button_text = button.text.strip()
                            if button_text in ["Continuer", "Continue", "Next"]:
                                button_html = button.get_attribute("outerHTML")
                                if not any(oauth in button_html.lower() for oauth in ['google', 'facebook', 'apple']):
                                    continue_button = button
                                    logger.info(f"‚úÖ Bouton '{button_text}' trouv√©")
                                    break
                    except:
                        continue
                
                if continue_button:
                    continue_button.click()
                    logger.info("‚úÖ Bouton 'Continuer' cliqu√©")
                    time.sleep(5)
                
                # √âTAPE 3: Option "Connexion avec un mot de passe"
                logger.info("üîë Recherche option 'Connexion avec un mot de passe'...")
                try:
                    password_option = WebDriverWait(self.driver, 15).until(
                        EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Connexion avec un mot de passe') or contains(text(), 'password')]"))
                    )
                    password_option.click()
                    logger.info("‚úÖ Option 'Connexion avec un mot de passe' s√©lectionn√©e")
                    time.sleep(5)
                except TimeoutException:
                    logger.info("‚ÑπÔ∏è Option mot de passe non n√©cessaire")
                
                # √âTAPE 4: V√©rifier champ email
                try:
                    email_field_2 = WebDriverWait(self.driver, 5).until(
                        EC.visibility_of_element_located((By.ID, "login-username"))
                    )
                    current_value = email_field_2.get_attribute("value")
                    if not current_value or current_value.strip() == "":
                        email_field_2.clear()
                        time.sleep(0.5)
                        email_field_2.send_keys(self.email)
                        time.sleep(2)
                except:
                    pass
                
                # √âTAPE 5: Saisir mot de passe
                logger.info("üîë Saisie du mot de passe...")
                password_field = WebDriverWait(self.driver, 15).until(
                    EC.visibility_of_element_located((By.ID, "login-password"))
                )
                
                password_field.clear()
                time.sleep(0.5)
                password_field.send_keys(self.password)
                logger.info("‚úÖ Mot de passe saisi")
                time.sleep(2)
                
                # √âTAPE 6: Se connecter
                logger.info("üîê Clic sur le bouton de connexion...")
                submit_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "login-button"))
                )
                submit_button.click()
                logger.info("‚è≥ Connexion en cours...")
                
                # Attendre redirection
                try:
                    WebDriverWait(self.driver, 30).until(
                        lambda driver: "artists.spotify.com" in driver.current_url and "login" not in driver.current_url.lower()
                    )
                    time.sleep(5)
                    logger.info("‚úÖ Connexion r√©ussie !")
                    return True
                except TimeoutException:
                    current_url = self.driver.current_url
                    if "artists.spotify.com" in current_url and "login" not in current_url.lower():
                        logger.info("‚úÖ Connexion r√©ussie !")
                        return True
                    raise
                
            except Exception as e:
                logger.error(f"‚ùå Erreur connexion (tentative {attempt}): {str(e)[:100]}")
                self._save_screenshot(f"login_error_attempt_{attempt}")
                
                if attempt < max_retries:
                    logger.info("üîÑ Nouvelle tentative...")
                    try:
                        self.driver.quit()
                    except:
                        pass
                    time.sleep(5)
                    self.initialize_driver()
                    continue
        
        return False
    
    def _get_files_before_download(self) -> set:
        """R√©cup√®re les fichiers CSV avant t√©l√©chargement."""
        return set(glob.glob(str(self.download_dir / "*.csv")))
    
    def _wait_for_download_complete(self, files_before: set, timeout: int = 60) -> List[str]:
        """Attend la fin du t√©l√©chargement."""
        logger.info("‚è≥ Attente du t√©l√©chargement...")
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            current_files = set(glob.glob(str(self.download_dir / "*.csv")))
            new_files = current_files - files_before
            
            downloading_files = glob.glob(str(self.download_dir / "*.crdownload"))
            
            if not downloading_files and new_files:
                logger.info(f"‚úÖ T√©l√©chargement termin√©: {len(new_files)} fichier(s)")
                return list(new_files)
            
            time.sleep(2)
        
        logger.warning("‚ö†Ô∏è Timeout du t√©l√©chargement")
        return []
    
    def download_music_tracks_csv(self) -> List[str]:
        """
        T√©l√©charge les CSV depuis Musique > Titres avec filtre "Depuis le d√©but".
        
        Returns:
            Liste des fichiers t√©l√©charg√©s
        """
        downloaded_files = []
        
        try:
            logger.info("\nüéµ Navigation vers la section Musique...")
            time.sleep(5)
            
            # √âTAPE 1: Cliquer sur "Musique" dans le menu
            logger.info("üìä Recherche du menu 'Musique'...")
            
            music_selectors = [
                "//a[contains(text(), 'Musique') or contains(text(), 'Music')]",
                "//button[contains(text(), 'Musique') or contains(text(), 'Music')]",
                "//span[contains(text(), 'Musique') or contains(text(), 'Music')]/parent::a"
            ]
            
            music_clicked = False
            for selector in music_selectors:
                try:
                    music_element = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    music_element.click()
                    logger.info("‚úÖ Section 'Musique' cliqu√©e")
                    music_clicked = True
                    time.sleep(5)
                    break
                except TimeoutException:
                    continue
            
            if not music_clicked:
                logger.info("üîÑ Tentative navigation directe vers Musique...")
                self.driver.get("https://artists.spotify.com/c/music")
                time.sleep(5)
            
            # √âTAPE 2: Cliquer sur l'onglet "Titres"
            logger.info("üéµ Recherche de l'onglet 'Titres'...")
            
            titles_selectors = [
                "//button[contains(text(), 'Titres') or contains(text(), 'Tracks')]",
                "//a[contains(text(), 'Titres') or contains(text(), 'Tracks')]",
                "//*[contains(text(), 'Titres') and (name()='button' or name()='a')]"
            ]
            
            for selector in titles_selectors:
                try:
                    titles_tab = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    titles_tab.click()
                    logger.info("‚úÖ Onglet 'Titres' cliqu√©")
                    time.sleep(3)
                    break
                except TimeoutException:
                    continue
            
            # √âTAPE 3: Ouvrir le menu des filtres
            logger.info("üîç Ouverture du menu de filtrage...")
            
            filter_selectors = [
                "//button[contains(text(), 'Filtrer') or contains(text(), 'Filter') or contains(@aria-label, 'filter')]",
                "//button[contains(text(), 'Filtres') or contains(text(), 'Filters')]",
                "//button[contains(@class, 'filter')]"
            ]
            
            filter_opened = False
            for selector in filter_selectors:
                try:
                    filter_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    filter_button.click()
                    logger.info("‚úÖ Menu de filtrage ouvert")
                    filter_opened = True
                    time.sleep(2)
                    break
                except (TimeoutException, ElementClickInterceptedException):
                    continue
            
            if not filter_opened:
                logger.warning("‚ö†Ô∏è Impossible d'ouvrir les filtres, tentative sans filtre...")
            else:
                # √âTAPE 4: S√©lectionner "Depuis le d√©but"
                logger.info("üìÖ S√©lection du filtre 'Depuis le d√©but'...")
                
                depuis_debut_selectors = [
                    "//label[contains(text(), 'Depuis le d√©but')]/preceding-sibling::input",
                    "//span[contains(text(), 'Depuis le d√©but')]/parent::label",
                    "//*[contains(text(), 'Depuis le d√©but')]"
                ]
                
                for selector in depuis_debut_selectors:
                    try:
                        depuis_debut = WebDriverWait(self.driver, 5).until(
                            EC.element_to_be_clickable((By.XPATH, selector))
                        )
                        depuis_debut.click()
                        logger.info("‚úÖ Filtre 'Depuis le d√©but' s√©lectionn√©")
                        time.sleep(2)
                        
                        # Fermer le menu de filtrage si n√©cessaire
                        try:
                            close_filter = self.driver.find_element(By.XPATH, "//button[contains(@aria-label, 'close') or contains(@aria-label, 'fermer')]")
                            close_filter.click()
                            time.sleep(1)
                        except:
                            pass
                        
                        break
                    except (TimeoutException, ElementClickInterceptedException):
                        continue
            
            # √âTAPE 5: T√©l√©charger le CSV
            logger.info("üì• Recherche du bouton de t√©l√©chargement...")
            
            files_before = self._get_files_before_download()
            
            # S√©lecteurs pour le bouton de t√©l√©chargement
            download_selectors = [
                "//button[@aria-label='T√©l√©charger' or @aria-label='Download']",
                "//button[contains(@title, 'T√©l√©charger') or contains(@title, 'Download')]",
                "//button[.//svg[contains(@class, 'download')]]",
                "//*[name()='svg' and contains(@class, 'download')]/ancestor::button",
                "//button[contains(@data-testid, 'download')]"
            ]
            
            download_found = False
            for i, selector in enumerate(download_selectors):
                try:
                    logger.info(f"üîç Test s√©lecteur t√©l√©chargement {i+1}/{len(download_selectors)}...")
                    download_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    
                    # Scroll vers le bouton
                    self.driver.execute_script("arguments[0].scrollIntoView(true);", download_button)
                    time.sleep(1)
                    
                    download_button.click()
                    logger.info("‚úÖ Bouton t√©l√©chargement cliqu√©")
                    
                    new_files = self._wait_for_download_complete(files_before, timeout=90)
                    if new_files:
                        downloaded_files.extend(new_files)
                        download_found = True
                        logger.info(f"üéâ {len(new_files)} fichier(s) t√©l√©charg√©(s) !")
                        break
                        
                except (TimeoutException, ElementClickInterceptedException) as e:
                    logger.warning(f"‚ö†Ô∏è S√©lecteur {i+1} √©chou√©: {str(e)[:50]}")
                    continue
            
            if not download_found:
                logger.error("‚ùå Aucun bouton de t√©l√©chargement trouv√©")
                self._save_screenshot("music_tracks_no_download_button")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans download_music_tracks_csv: {e}")
            self._save_screenshot("music_tracks_error")
        
        return downloaded_files
    
    def parse_csv_files(self, csv_files: List[str]) -> Dict[str, pd.DataFrame]:
        """Parse les fichiers CSV t√©l√©charg√©s."""
        parsed_data = {}
        
        for csv_file in csv_files:
            try:
                filename = Path(csv_file).stem
                logger.info(f"üìä Parsing {filename}...")
                
                df = pd.read_csv(csv_file, encoding='utf-8')
                df.columns = df.columns.str.strip()
                df['collected_at'] = datetime.now()
                df['source_file'] = filename
                
                parsed_data[filename] = df
                logger.info(f"‚úÖ {filename}: {len(df)} lignes, {len(df.columns)} colonnes")
                
            except Exception as e:
                logger.error(f"‚ùå Erreur parsing {csv_file}: {e}")
        
        return parsed_data
    
    def organize_files(self, downloaded_files: List[str]) -> List[str]:
        """Renomme les fichiers avec la date."""
        if not downloaded_files:
            return []
        
        logger.info(f"\nüìÅ Organisation de {len(downloaded_files)} fichier(s)...")
        organized_files = []
        current_date = datetime.now().strftime("%Y%m%d_%H%M")
        
        for file_path in downloaded_files:
            try:
                file_path = Path(file_path)
                name = file_path.stem
                ext = file_path.suffix
                
                new_filename = f"music_tracks_{name}_{current_date}{ext}"
                new_path = file_path.parent / new_filename
                
                counter = 1
                while new_path.exists():
                    new_filename = f"music_tracks_{name}_{current_date}_{counter}{ext}"
                    new_path = file_path.parent / new_filename
                    counter += 1
                
                file_path.rename(new_path)
                organized_files.append(str(new_path))
                logger.info(f"‚úÖ Renomm√©: {file_path.name} ‚Üí {new_path.name}")
                
            except Exception as e:
                logger.error(f"‚ùå Erreur renommage {file_path}: {e}")
                organized_files.append(str(file_path))
        
        return organized_files
    
    def _save_screenshot(self, name: str) -> None:
        """Sauvegarde une capture d'√©cran."""
        try:
            if self.driver and self.driver.session_id:
                screenshot_path = self.download_dir / f"{name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                self.driver.save_screenshot(str(screenshot_path))
                logger.info(f"üì∑ Capture d'√©cran: {screenshot_path.name}")
        except Exception as e:
            logger.error(f"‚ùå Erreur capture d'√©cran: {e}")
    
    def close(self) -> None:
        """Ferme le driver."""
        if self.driver:
            try:
                logger.info("üîÑ Fermeture du driver...")
                self.driver.quit()
                logger.info("‚úÖ Driver ferm√©")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur fermeture driver: {e}")
    
    def collect(self) -> Tuple[bool, Dict[str, pd.DataFrame]]:
        """
        Collecte compl√®te: login + t√©l√©chargement + parsing.
        
        Returns:
            (success, parsed_data)
        """
        try:
            self.initialize_driver()
            
            if not self.login():
                logger.error("‚ùå √âchec de la connexion")
                return False, {}
            
            downloaded_files = self.download_music_tracks_csv()
            
            if not downloaded_files:
                logger.warning("‚ö†Ô∏è Aucun fichier t√©l√©charg√©")
                return False, {}
            
            organized_files = self.organize_files(downloaded_files)
            parsed_data = self.parse_csv_files(organized_files)
            
            logger.info(f"\nüéâ Collecte termin√©e: {len(parsed_data)} fichier(s) pars√©(s)")
            
            return True, parsed_data
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la collecte: {e}")
            return False, {}
        finally:
            self.close()


# Test du module
if __name__ == "__main__":
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent.parent.parent))
    
    from src.utils.config_loader import config_loader
    
    config = config_loader.load()
    s4a_config = config.get('spotify_for_artists', {})
    
    if not s4a_config:
        print("‚ùå Configuration 'spotify_for_artists' manquante")
        sys.exit(1)
    
    print("\n" + "="*60)
    print("üöÄ SPOTIFY FOR ARTISTS - COLLECTEUR MUSIQUE/TITRES")
    print("="*60)
    print(f"üìß Email: {s4a_config['email']}")
    print(f"üìÅ Destination: {s4a_config['download_dir']}")
    print("="*60 + "\n")
    
    collector = SpotifyForArtistsCollector(
        email=s4a_config['email'],
        password=s4a_config['password'],
        download_dir=s4a_config['download_dir'],
        headless=s4a_config.get('headless', False)
    )
    
    success, data = collector.collect()
    
    print("\n" + "="*60)
    if success:
        print("‚úÖ SUCC√àS")
        print("="*60)
        for filename, df in data.items():
            print(f"\nüìÑ {filename}")
            print(f"   ‚îî‚îÄ {len(df)} lignes √ó {len(df.columns)} colonnes")
            print(f"   ‚îî‚îÄ Colonnes: {', '.join(df.columns.tolist()[:10])}")
    else:
        print("‚ùå √âCHEC")
    print("="*60 + "\n")