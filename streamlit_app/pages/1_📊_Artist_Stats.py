"""Page des statistiques des artistes."""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import sys
from pathlib import Path
from datetime import datetime, timedelta

# Ajouter le r√©pertoire parent au path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

from src.utils.config_loader import config_loader
from src.database.postgresql_handler import PostgreSQLHandler

st.set_page_config(page_title="Artist Stats", page_icon="üìä", layout="wide")

st.title("üìä Statistiques des Artistes")

# Connexion DB
@st.cache_resource
def get_db_connection():
    config = config_loader.load()
    db_config = config['database']
    return PostgreSQLHandler(
        host=db_config['host'],
        port=db_config['port'],
        database=db_config['database'],
        user=db_config['user'],
        password=db_config['password']
    )

db = get_db_connection()

# R√©cup√©rer la liste des artistes
@st.cache_data(ttl=300)
def get_artists():
    with db.get_connection() as conn:
        query = "SELECT artist_id, name, followers, popularity, genres FROM artists ORDER BY name;"
        df = pd.read_sql(query, conn)
    return df

try:
    artists_df = get_artists()
    
    if artists_df.empty:
        st.warning("‚ö†Ô∏è Aucun artiste dans la base de donn√©es. Lancez d'abord `collect_and_store.py`")
        st.stop()
    
    # S√©lecteur d'artiste
    selected_artist_name = st.selectbox(
        "S√©lectionnez un artiste",
        options=artists_df['name'].tolist(),
        index=0
    )
    
    artist_data = artists_df[artists_df['name'] == selected_artist_name].iloc[0]
    artist_id = artist_data['artist_id']
    
    st.markdown("---")
    
    # M√©triques actuelles
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            label="üë• Followers",
            value=f"{artist_data['followers']:,}",
        )
    
    with col2:
        st.metric(
            label="üî• Popularit√©",
            value=f"{artist_data['popularity']}/100",
        )
    
    with col3:
        genres = artist_data['genres']
        genre_text = ", ".join(genres) if genres else "N/A"
        st.metric(
            label="üé∏ Genres",
            value=genre_text[:20] + "..." if len(genre_text) > 20 else genre_text
        )
    
    st.markdown("---")
    
    # R√©cup√©rer l'historique
    @st.cache_data(ttl=300)
    def get_artist_history(artist_id, days=30):
        with db.get_connection() as conn:
            query = """
                SELECT 
                    DATE(collected_at) as date,
                    AVG(followers) as followers,
                    AVG(popularity) as popularity
                FROM artist_history
                WHERE artist_id = %s 
                AND collected_at >= NOW() - INTERVAL '%s days'
                GROUP BY DATE(collected_at)
                ORDER BY date;
            """
            df = pd.read_sql(query, conn, params=(artist_id, days))
        return df
    
    # Slider pour choisir la p√©riode
    days = st.slider("P√©riode d'analyse (jours)", min_value=7, max_value=90, value=30)
    
    history_df = get_artist_history(artist_id, days)
    
    if not history_df.empty:
        # Graphique d'√©volution des followers
        st.subheader("üìà √âvolution des Followers")
        fig_followers = px.line(
            history_df,
            x='date',
            y='followers',
            title=f"Followers de {selected_artist_name}",
            labels={'date': 'Date', 'followers': 'Nombre de Followers'},
            markers=True
        )
        fig_followers.update_layout(hovermode='x unified')
        st.plotly_chart(fig_followers, use_container_width=True)
        
        # Graphique d'√©volution de la popularit√©
        st.subheader("üî• √âvolution de la Popularit√©")
        fig_popularity = px.line(
            history_df,
            x='date',
            y='popularity',
            title=f"Popularit√© de {selected_artist_name}",
            labels={'date': 'Date', 'popularity': 'Score de Popularit√©'},
            markers=True,
            color_discrete_sequence=['#FF6B6B']
        )
        fig_popularity.update_layout(hovermode='x unified')
        st.plotly_chart(fig_popularity, use_container_width=True)
        
        # Statistiques de variation
        if len(history_df) >= 2:
            first_followers = history_df.iloc[0]['followers']
            last_followers = history_df.iloc[-1]['followers']
            followers_change = last_followers - first_followers
            followers_change_pct = (followers_change / first_followers * 100) if first_followers > 0 else 0
            
            st.subheader("üìä Variations sur la p√©riode")
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric(
                    label="Variation Followers",
                    value=f"{int(last_followers):,}",
                    delta=f"{int(followers_change):,} ({followers_change_pct:+.1f}%)"
                )
            
            with col2:
                first_pop = history_df.iloc[0]['popularity']
                last_pop = history_df.iloc[-1]['popularity']
                pop_change = last_pop - first_pop
                st.metric(
                    label="Variation Popularit√©",
                    value=f"{int(last_pop)}/100",
                    delta=f"{pop_change:+.1f}"
                )
    else:
        st.info("üìä Pas encore assez de donn√©es historiques. Lancez la collecte quotidiennement pour voir l'√©volution !")
    
    # Informations suppl√©mentaires
    with st.expander("‚ÑπÔ∏è Informations sur les m√©triques"):
        st.markdown("""
        - **Followers** : Nombre total d'abonn√©s sur Spotify
        - **Popularit√©** : Score de 0 √† 100 calcul√© par Spotify bas√© sur l'√©coute r√©cente
        - **Genres** : Cat√©gories musicales associ√©es √† l'artiste
        
        Les donn√©es sont collect√©es quotidiennement via le pipeline ETL.
        """)

except Exception as e:
    st.error(f"‚ùå Erreur: {e}")
    st.info("üí° V√©rifiez la connexion √† la base de donn√©es")